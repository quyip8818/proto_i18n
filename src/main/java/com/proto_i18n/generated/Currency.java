// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: currency.proto

package com.proto_i18n.generated;

/**
 * Protobuf type {@code com.proto_i18n.Currency}
 */
public final class Currency extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:com.proto_i18n.Currency)
    CurrencyOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Currency.newBuilder() to construct.
  private Currency(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Currency() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Currency();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Currency(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.proto_i18n.generated.CurrencyOuterClass.internal_static_com_proto_i18n_Currency_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.proto_i18n.generated.CurrencyOuterClass.internal_static_com_proto_i18n_Currency_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.proto_i18n.generated.Currency.class, com.proto_i18n.generated.Currency.Builder.class);
  }

  /**
   * Protobuf enum {@code com.proto_i18n.Currency.CurrencyCode}
   */
  public enum CurrencyCode
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>AED = 1 [(.com.proto_i18n.Country.name) = "Dirham"];</code>
     */
    AED(1),
    /**
     * <code>AFN = 2 [(.com.proto_i18n.Country.name) = "Afghani"];</code>
     */
    AFN(2),
    /**
     * <code>ALL = 3 [(.com.proto_i18n.Country.name) = "Lek"];</code>
     */
    ALL(3),
    /**
     * <code>AMD = 4 [(.com.proto_i18n.Country.name) = "Dram"];</code>
     */
    AMD(4),
    /**
     * <code>ANG = 5 [(.com.proto_i18n.Country.name) = "Netherlands Antilles Guilder"];</code>
     */
    ANG(5),
    /**
     * <code>ARS = 6 [(.com.proto_i18n.Country.name) = "Peso"];</code>
     */
    ARS(6),
    /**
     * <code>AUD = 7 [(.com.proto_i18n.Country.name) = "Australian Dollars"];</code>
     */
    AUD(7),
    /**
     * <code>AZN = 8 [(.com.proto_i18n.Country.name) = "Manat"];</code>
     */
    AZN(8),
    /**
     * <code>BBD = 9 [(.com.proto_i18n.Country.name) = "Barbadian Dollar"];</code>
     */
    BBD(9),
    /**
     * <code>BDT = 10 [(.com.proto_i18n.Country.name) = "Taka"];</code>
     */
    BDT(10),
    /**
     * <code>BGN = 11 [(.com.proto_i18n.Country.name) = "Lev"];</code>
     */
    BGN(11),
    /**
     * <code>BHD = 12 [(.com.proto_i18n.Country.name) = "Bahraini Dinar"];</code>
     */
    BHD(12),
    /**
     * <code>BIF = 13 [(.com.proto_i18n.Country.name) = "Burundi Franc"];</code>
     */
    BIF(13),
    /**
     * <code>BMD = 14 [(.com.proto_i18n.Country.name) = "Bermudian Dollar"];</code>
     */
    BMD(14),
    /**
     * <code>BND = 15 [(.com.proto_i18n.Country.name) = "Bruneian Dollar"];</code>
     */
    BND(15),
    /**
     * <code>BOB = 16 [(.com.proto_i18n.Country.name) = "Boliviano"];</code>
     */
    BOB(16),
    /**
     * <code>BRL = 17 [(.com.proto_i18n.Country.name) = "Brazil"];</code>
     */
    BRL(17),
    /**
     * <code>BSD = 18 [(.com.proto_i18n.Country.name) = "Bahamian Dollar"];</code>
     */
    BSD(18),
    /**
     * <code>BWP = 19 [(.com.proto_i18n.Country.name) = "Pula"];</code>
     */
    BWP(19),
    /**
     * <code>BYR = 20 [(.com.proto_i18n.Country.name) = "Belarus Ruble"];</code>
     */
    BYR(20),
    /**
     * <code>BZD = 21 [(.com.proto_i18n.Country.name) = "Belizean Dollar"];</code>
     */
    BZD(21),
    /**
     * <code>CAD = 22 [(.com.proto_i18n.Country.name) = "Canadian Dollar"];</code>
     */
    CAD(22),
    /**
     * <code>CDF = 23 [(.com.proto_i18n.Country.name) = "Congolese Frank"];</code>
     */
    CDF(23),
    /**
     * <code>CHF = 24 [(.com.proto_i18n.Country.name) = "Swiss Franc"];</code>
     */
    CHF(24),
    /**
     * <code>CLP = 25 [(.com.proto_i18n.Country.name) = "Chilean Peso"];</code>
     */
    CLP(25),
    /**
     * <code>CNY = 26 [(.com.proto_i18n.Country.name) = "Yuan Renminbi"];</code>
     */
    CNY(26),
    /**
     * <code>COP = 27 [(.com.proto_i18n.Country.name) = "Peso"];</code>
     */
    COP(27),
    /**
     * <code>CRC = 28 [(.com.proto_i18n.Country.name) = "Costa Rican Colon"];</code>
     */
    CRC(28),
    /**
     * <code>CUP = 29 [(.com.proto_i18n.Country.name) = "Cuban Peso"];</code>
     */
    CUP(29),
    /**
     * <code>CVE = 30 [(.com.proto_i18n.Country.name) = "Escudo"];</code>
     */
    CVE(30),
    /**
     * <code>CYP = 31 [(.com.proto_i18n.Country.name) = "Cypriot Pound"];</code>
     */
    CYP(31),
    /**
     * <code>CZK = 32 [(.com.proto_i18n.Country.name) = "Koruna"];</code>
     */
    CZK(32),
    /**
     * <code>DJF = 33 [(.com.proto_i18n.Country.name) = "Djiboutian Franc"];</code>
     */
    DJF(33),
    /**
     * <code>DKK = 34 [(.com.proto_i18n.Country.name) = "Danish Krone"];</code>
     */
    DKK(34),
    /**
     * <code>DOP = 35 [(.com.proto_i18n.Country.name) = "Dominican Peso"];</code>
     */
    DOP(35),
    /**
     * <code>DZD = 36 [(.com.proto_i18n.Country.name) = "Algerian Dinar"];</code>
     */
    DZD(36),
    /**
     * <code>ECS = 37 [(.com.proto_i18n.Country.name) = "Sucre"];</code>
     */
    ECS(37),
    /**
     * <code>EEK = 38 [(.com.proto_i18n.Country.name) = "Estonian Kroon"];</code>
     */
    EEK(38),
    /**
     * <code>EGP = 39 [(.com.proto_i18n.Country.name) = "Egyptian Pound"];</code>
     */
    EGP(39),
    /**
     * <code>ETB = 40 [(.com.proto_i18n.Country.name) = "Ethiopian Birr"];</code>
     */
    ETB(40),
    /**
     * <code>EUR = 41 [(.com.proto_i18n.Country.name) = "Euros"];</code>
     */
    EUR(41),
    /**
     * <code>FJD = 42 [(.com.proto_i18n.Country.name) = "Fijian Dollar"];</code>
     */
    FJD(42),
    /**
     * <code>FKP = 43 [(.com.proto_i18n.Country.name) = "Falkland Pound"];</code>
     */
    FKP(43),
    /**
     * <code>GBP = 44 [(.com.proto_i18n.Country.name) = "Sterling"];</code>
     */
    GBP(44),
    /**
     * <code>GEL = 45 [(.com.proto_i18n.Country.name) = "Lari"];</code>
     */
    GEL(45),
    /**
     * <code>GIP = 46 [(.com.proto_i18n.Country.name) = "Gibraltar Pound"];</code>
     */
    GIP(46),
    /**
     * <code>GMD = 47 [(.com.proto_i18n.Country.name) = "Dalasi"];</code>
     */
    GMD(47),
    /**
     * <code>GNF = 48 [(.com.proto_i18n.Country.name) = "Guinean Franc"];</code>
     */
    GNF(48),
    /**
     * <code>GTQ = 49 [(.com.proto_i18n.Country.name) = "Quetzal"];</code>
     */
    GTQ(49),
    /**
     * <code>GYD = 50 [(.com.proto_i18n.Country.name) = "Guyanaese Dollar"];</code>
     */
    GYD(50),
    /**
     * <code>HKD = 51 [(.com.proto_i18n.Country.name) = "HKD"];</code>
     */
    HKD(51),
    /**
     * <code>HNL = 52 [(.com.proto_i18n.Country.name) = "Lempira"];</code>
     */
    HNL(52),
    /**
     * <code>HRK = 53 [(.com.proto_i18n.Country.name) = "Croatian Dinar"];</code>
     */
    HRK(53),
    /**
     * <code>HTG = 54 [(.com.proto_i18n.Country.name) = "Gourde"];</code>
     */
    HTG(54),
    /**
     * <code>HUF = 55 [(.com.proto_i18n.Country.name) = "Forint"];</code>
     */
    HUF(55),
    /**
     * <code>IDR = 56 [(.com.proto_i18n.Country.name) = "Indonesian Rupiah"];</code>
     */
    IDR(56),
    /**
     * <code>ILS = 57 [(.com.proto_i18n.Country.name) = "Shekel"];</code>
     */
    ILS(57),
    /**
     * <code>INR = 58 [(.com.proto_i18n.Country.name) = "Indian Rupee"];</code>
     */
    INR(58),
    /**
     * <code>IQD = 59 [(.com.proto_i18n.Country.name) = "Iraqi Dinar"];</code>
     */
    IQD(59),
    /**
     * <code>IRR = 60 [(.com.proto_i18n.Country.name) = "Iranian Rial"];</code>
     */
    IRR(60),
    /**
     * <code>ISK = 61 [(.com.proto_i18n.Country.name) = "Icelandic Krona"];</code>
     */
    ISK(61),
    /**
     * <code>JMD = 62 [(.com.proto_i18n.Country.name) = "Jamaican Dollar"];</code>
     */
    JMD(62),
    /**
     * <code>JOD = 63 [(.com.proto_i18n.Country.name) = "Jordanian Dinar"];</code>
     */
    JOD(63),
    /**
     * <code>JPY = 64 [(.com.proto_i18n.Country.name) = "Japanese Yen"];</code>
     */
    JPY(64),
    /**
     * <code>KES = 65 [(.com.proto_i18n.Country.name) = "Kenyan Shilling"];</code>
     */
    KES(65),
    /**
     * <code>KGS = 66 [(.com.proto_i18n.Country.name) = "Som"];</code>
     */
    KGS(66),
    /**
     * <code>KHR = 67 [(.com.proto_i18n.Country.name) = "Riel"];</code>
     */
    KHR(67),
    /**
     * <code>KMF = 68 [(.com.proto_i18n.Country.name) = "Comoran Franc"];</code>
     */
    KMF(68),
    /**
     * <code>KPW = 69 [(.com.proto_i18n.Country.name) = "Won"];</code>
     */
    KPW(69),
    /**
     * <code>KRW = 70 [(.com.proto_i18n.Country.name) = "Won"];</code>
     */
    KRW(70),
    /**
     * <code>KWD = 71 [(.com.proto_i18n.Country.name) = "Kuwaiti Dinar"];</code>
     */
    KWD(71),
    /**
     * <code>KYD = 72 [(.com.proto_i18n.Country.name) = "Caymanian Dollar"];</code>
     */
    KYD(72),
    /**
     * <code>KZT = 73 [(.com.proto_i18n.Country.name) = "Tenge"];</code>
     */
    KZT(73),
    /**
     * <code>LAK = 74 [(.com.proto_i18n.Country.name) = "Kip"];</code>
     */
    LAK(74),
    /**
     * <code>LBP = 75 [(.com.proto_i18n.Country.name) = "Lebanese Pound"];</code>
     */
    LBP(75),
    /**
     * <code>LKR = 76 [(.com.proto_i18n.Country.name) = "Rupee"];</code>
     */
    LKR(76),
    /**
     * <code>LRD = 77 [(.com.proto_i18n.Country.name) = "Liberian Dollar"];</code>
     */
    LRD(77),
    /**
     * <code>LSL = 78 [(.com.proto_i18n.Country.name) = "Loti"];</code>
     */
    LSL(78),
    /**
     * <code>LTL = 79 [(.com.proto_i18n.Country.name) = "Lita"];</code>
     */
    LTL(79),
    /**
     * <code>LVL = 80 [(.com.proto_i18n.Country.name) = "Lat"];</code>
     */
    LVL(80),
    /**
     * <code>LYD = 81 [(.com.proto_i18n.Country.name) = "Libyan Dinar"];</code>
     */
    LYD(81),
    /**
     * <code>MAD = 82 [(.com.proto_i18n.Country.name) = "Dirham"];</code>
     */
    MAD(82),
    /**
     * <code>MDL = 83 [(.com.proto_i18n.Country.name) = "Leu"];</code>
     */
    MDL(83),
    /**
     * <code>MGA = 84 [(.com.proto_i18n.Country.name) = "Malagasy Franc"];</code>
     */
    MGA(84),
    /**
     * <code>MKD = 85 [(.com.proto_i18n.Country.name) = "Denar"];</code>
     */
    MKD(85),
    /**
     * <code>MMK = 86 [(.com.proto_i18n.Country.name) = "Kyat"];</code>
     */
    MMK(86),
    /**
     * <code>MNT = 87 [(.com.proto_i18n.Country.name) = "Tugrik"];</code>
     */
    MNT(87),
    /**
     * <code>MOP = 88 [(.com.proto_i18n.Country.name) = "Pataca"];</code>
     */
    MOP(88),
    /**
     * <code>MRO = 89 [(.com.proto_i18n.Country.name) = "Ouguiya"];</code>
     */
    MRO(89),
    /**
     * <code>MTL = 90 [(.com.proto_i18n.Country.name) = "Maltese Lira"];</code>
     */
    MTL(90),
    /**
     * <code>MUR = 91 [(.com.proto_i18n.Country.name) = "Mauritian Rupee"];</code>
     */
    MUR(91),
    /**
     * <code>MVR = 92 [(.com.proto_i18n.Country.name) = "Rufiyaa"];</code>
     */
    MVR(92),
    /**
     * <code>MWK = 93 [(.com.proto_i18n.Country.name) = "Malawian Kwacha"];</code>
     */
    MWK(93),
    /**
     * <code>MXN = 94 [(.com.proto_i18n.Country.name) = "Peso"];</code>
     */
    MXN(94),
    /**
     * <code>MYR = 95 [(.com.proto_i18n.Country.name) = "Ringgit"];</code>
     */
    MYR(95),
    /**
     * <code>MZN = 96 [(.com.proto_i18n.Country.name) = "Metical"];</code>
     */
    MZN(96),
    /**
     * <code>NAD = 97 [(.com.proto_i18n.Country.name) = "Dollar"];</code>
     */
    NAD(97),
    /**
     * <code>NGN = 98 [(.com.proto_i18n.Country.name) = "Naira"];</code>
     */
    NGN(98),
    /**
     * <code>NIO = 99 [(.com.proto_i18n.Country.name) = "Cordoba Oro"];</code>
     */
    NIO(99),
    /**
     * <code>NOK = 100 [(.com.proto_i18n.Country.name) = "Norwegian Krone"];</code>
     */
    NOK(100),
    /**
     * <code>NPR = 101 [(.com.proto_i18n.Country.name) = "Nepalese Rupee"];</code>
     */
    NPR(101),
    /**
     * <code>NZD = 102 [(.com.proto_i18n.Country.name) = "New Zealand Dollars"];</code>
     */
    NZD(102),
    /**
     * <code>OMR = 103 [(.com.proto_i18n.Country.name) = "Sul Rial"];</code>
     */
    OMR(103),
    /**
     * <code>PAB = 104 [(.com.proto_i18n.Country.name) = "Balboa"];</code>
     */
    PAB(104),
    /**
     * <code>PEN = 105 [(.com.proto_i18n.Country.name) = "Nuevo Sol"];</code>
     */
    PEN(105),
    /**
     * <code>PGK = 106 [(.com.proto_i18n.Country.name) = "Kina"];</code>
     */
    PGK(106),
    /**
     * <code>PHP = 107 [(.com.proto_i18n.Country.name) = "Peso"];</code>
     */
    PHP(107),
    /**
     * <code>PKR = 108 [(.com.proto_i18n.Country.name) = "Rupee"];</code>
     */
    PKR(108),
    /**
     * <code>PLN = 109 [(.com.proto_i18n.Country.name) = "Zloty"];</code>
     */
    PLN(109),
    /**
     * <code>PYG = 110 [(.com.proto_i18n.Country.name) = "Guarani"];</code>
     */
    PYG(110),
    /**
     * <code>QAR = 111 [(.com.proto_i18n.Country.name) = "Rial"];</code>
     */
    QAR(111),
    /**
     * <code>RON = 112 [(.com.proto_i18n.Country.name) = "Leu"];</code>
     */
    RON(112),
    /**
     * <code>RUB = 113 [(.com.proto_i18n.Country.name) = "Ruble"];</code>
     */
    RUB(113),
    /**
     * <code>RWF = 114 [(.com.proto_i18n.Country.name) = "Rwanda Franc"];</code>
     */
    RWF(114),
    /**
     * <code>SAR = 115 [(.com.proto_i18n.Country.name) = "Riyal"];</code>
     */
    SAR(115),
    /**
     * <code>SBD = 116 [(.com.proto_i18n.Country.name) = "Solomon Islands Dollar"];</code>
     */
    SBD(116),
    /**
     * <code>SCR = 117 [(.com.proto_i18n.Country.name) = "Rupee"];</code>
     */
    SCR(117),
    /**
     * <code>SDG = 118 [(.com.proto_i18n.Country.name) = "Dinar"];</code>
     */
    SDG(118),
    /**
     * <code>SEK = 119 [(.com.proto_i18n.Country.name) = "Krona"];</code>
     */
    SEK(119),
    /**
     * <code>SGD = 120 [(.com.proto_i18n.Country.name) = "Dollar"];</code>
     */
    SGD(120),
    /**
     * <code>SKK = 121 [(.com.proto_i18n.Country.name) = "Koruna"];</code>
     */
    SKK(121),
    /**
     * <code>SLL = 122 [(.com.proto_i18n.Country.name) = "Leone"];</code>
     */
    SLL(122),
    /**
     * <code>SOS = 123 [(.com.proto_i18n.Country.name) = "Shilling"];</code>
     */
    SOS(123),
    /**
     * <code>SRD = 124 [(.com.proto_i18n.Country.name) = "Surinamese Guilder"];</code>
     */
    SRD(124),
    /**
     * <code>STD = 125 [(.com.proto_i18n.Country.name) = "Dobra"];</code>
     */
    STD(125),
    /**
     * <code>SVC = 126 [(.com.proto_i18n.Country.name) = "Salvadoran Colon"];</code>
     */
    SVC(126),
    /**
     * <code>SYP = 127 [(.com.proto_i18n.Country.name) = "Syrian Pound"];</code>
     */
    SYP(127),
    /**
     * <code>SZL = 128 [(.com.proto_i18n.Country.name) = "Lilangeni"];</code>
     */
    SZL(128),
    /**
     * <code>THB = 129 [(.com.proto_i18n.Country.name) = "Baht"];</code>
     */
    THB(129),
    /**
     * <code>TJS = 130 [(.com.proto_i18n.Country.name) = "Tajikistan Ruble"];</code>
     */
    TJS(130),
    /**
     * <code>TMT = 131 [(.com.proto_i18n.Country.name) = "Manat"];</code>
     */
    TMT(131),
    /**
     * <code>TND = 132 [(.com.proto_i18n.Country.name) = "Tunisian Dinar"];</code>
     */
    TND(132),
    /**
     * <code>TOP = 133 [(.com.proto_i18n.Country.name) = "Pa&#92;303&#92;225anga"];</code>
     */
    TOP(133),
    /**
     * <code>TRY = 134 [(.com.proto_i18n.Country.name) = "Lira"];</code>
     */
    TRY(134),
    /**
     * <code>TTD = 135 [(.com.proto_i18n.Country.name) = "Trinidad and Tobago Dollar"];</code>
     */
    TTD(135),
    /**
     * <code>TWD = 136 [(.com.proto_i18n.Country.name) = "Dollar"];</code>
     */
    TWD(136),
    /**
     * <code>TZS = 137 [(.com.proto_i18n.Country.name) = "Shilling"];</code>
     */
    TZS(137),
    /**
     * <code>UAH = 138 [(.com.proto_i18n.Country.name) = "Hryvnia"];</code>
     */
    UAH(138),
    /**
     * <code>UGX = 139 [(.com.proto_i18n.Country.name) = "Shilling"];</code>
     */
    UGX(139),
    /**
     * <code>USD = 140 [(.com.proto_i18n.Country.name) = "USD"];</code>
     */
    USD(140),
    /**
     * <code>UYU = 141 [(.com.proto_i18n.Country.name) = "Peso"];</code>
     */
    UYU(141),
    /**
     * <code>UZS = 142 [(.com.proto_i18n.Country.name) = "Som"];</code>
     */
    UZS(142),
    /**
     * <code>VEF = 143 [(.com.proto_i18n.Country.name) = "Bolivar"];</code>
     */
    VEF(143),
    /**
     * <code>VND = 144 [(.com.proto_i18n.Country.name) = "Dong"];</code>
     */
    VND(144),
    /**
     * <code>VUV = 145 [(.com.proto_i18n.Country.name) = "Vatu"];</code>
     */
    VUV(145),
    /**
     * <code>XAF = 146 [(.com.proto_i18n.Country.name) = "CFA Franc BEAC"];</code>
     */
    XAF(146),
    /**
     * <code>XCD = 147 [(.com.proto_i18n.Country.name) = "East Caribbean Dollar"];</code>
     */
    XCD(147),
    /**
     * <code>XOF = 148 [(.com.proto_i18n.Country.name) = "CFA Franc BCEAO"];</code>
     */
    XOF(148),
    /**
     * <code>XPF = 149 [(.com.proto_i18n.Country.name) = "CFP Franc"];</code>
     */
    XPF(149),
    /**
     * <code>YER = 150 [(.com.proto_i18n.Country.name) = "Rial"];</code>
     */
    YER(150),
    /**
     * <code>ZAR = 151 [(.com.proto_i18n.Country.name) = "Rand"];</code>
     */
    ZAR(151),
    /**
     * <code>ZMK = 152 [(.com.proto_i18n.Country.name) = "Kwacha"];</code>
     */
    ZMK(152),
    /**
     * <code>ZWD = 153 [(.com.proto_i18n.Country.name) = "Zimbabwe Dollar"];</code>
     */
    ZWD(153),
    /**
     * <code>SSP = 154 [(.com.proto_i18n.Country.name) = "South Sudanese Pound"];</code>
     */
    SSP(154),
    ;

    /**
     * <code>AED = 1 [(.com.proto_i18n.Country.name) = "Dirham"];</code>
     */
    public static final int AED_VALUE = 1;
    /**
     * <code>AFN = 2 [(.com.proto_i18n.Country.name) = "Afghani"];</code>
     */
    public static final int AFN_VALUE = 2;
    /**
     * <code>ALL = 3 [(.com.proto_i18n.Country.name) = "Lek"];</code>
     */
    public static final int ALL_VALUE = 3;
    /**
     * <code>AMD = 4 [(.com.proto_i18n.Country.name) = "Dram"];</code>
     */
    public static final int AMD_VALUE = 4;
    /**
     * <code>ANG = 5 [(.com.proto_i18n.Country.name) = "Netherlands Antilles Guilder"];</code>
     */
    public static final int ANG_VALUE = 5;
    /**
     * <code>ARS = 6 [(.com.proto_i18n.Country.name) = "Peso"];</code>
     */
    public static final int ARS_VALUE = 6;
    /**
     * <code>AUD = 7 [(.com.proto_i18n.Country.name) = "Australian Dollars"];</code>
     */
    public static final int AUD_VALUE = 7;
    /**
     * <code>AZN = 8 [(.com.proto_i18n.Country.name) = "Manat"];</code>
     */
    public static final int AZN_VALUE = 8;
    /**
     * <code>BBD = 9 [(.com.proto_i18n.Country.name) = "Barbadian Dollar"];</code>
     */
    public static final int BBD_VALUE = 9;
    /**
     * <code>BDT = 10 [(.com.proto_i18n.Country.name) = "Taka"];</code>
     */
    public static final int BDT_VALUE = 10;
    /**
     * <code>BGN = 11 [(.com.proto_i18n.Country.name) = "Lev"];</code>
     */
    public static final int BGN_VALUE = 11;
    /**
     * <code>BHD = 12 [(.com.proto_i18n.Country.name) = "Bahraini Dinar"];</code>
     */
    public static final int BHD_VALUE = 12;
    /**
     * <code>BIF = 13 [(.com.proto_i18n.Country.name) = "Burundi Franc"];</code>
     */
    public static final int BIF_VALUE = 13;
    /**
     * <code>BMD = 14 [(.com.proto_i18n.Country.name) = "Bermudian Dollar"];</code>
     */
    public static final int BMD_VALUE = 14;
    /**
     * <code>BND = 15 [(.com.proto_i18n.Country.name) = "Bruneian Dollar"];</code>
     */
    public static final int BND_VALUE = 15;
    /**
     * <code>BOB = 16 [(.com.proto_i18n.Country.name) = "Boliviano"];</code>
     */
    public static final int BOB_VALUE = 16;
    /**
     * <code>BRL = 17 [(.com.proto_i18n.Country.name) = "Brazil"];</code>
     */
    public static final int BRL_VALUE = 17;
    /**
     * <code>BSD = 18 [(.com.proto_i18n.Country.name) = "Bahamian Dollar"];</code>
     */
    public static final int BSD_VALUE = 18;
    /**
     * <code>BWP = 19 [(.com.proto_i18n.Country.name) = "Pula"];</code>
     */
    public static final int BWP_VALUE = 19;
    /**
     * <code>BYR = 20 [(.com.proto_i18n.Country.name) = "Belarus Ruble"];</code>
     */
    public static final int BYR_VALUE = 20;
    /**
     * <code>BZD = 21 [(.com.proto_i18n.Country.name) = "Belizean Dollar"];</code>
     */
    public static final int BZD_VALUE = 21;
    /**
     * <code>CAD = 22 [(.com.proto_i18n.Country.name) = "Canadian Dollar"];</code>
     */
    public static final int CAD_VALUE = 22;
    /**
     * <code>CDF = 23 [(.com.proto_i18n.Country.name) = "Congolese Frank"];</code>
     */
    public static final int CDF_VALUE = 23;
    /**
     * <code>CHF = 24 [(.com.proto_i18n.Country.name) = "Swiss Franc"];</code>
     */
    public static final int CHF_VALUE = 24;
    /**
     * <code>CLP = 25 [(.com.proto_i18n.Country.name) = "Chilean Peso"];</code>
     */
    public static final int CLP_VALUE = 25;
    /**
     * <code>CNY = 26 [(.com.proto_i18n.Country.name) = "Yuan Renminbi"];</code>
     */
    public static final int CNY_VALUE = 26;
    /**
     * <code>COP = 27 [(.com.proto_i18n.Country.name) = "Peso"];</code>
     */
    public static final int COP_VALUE = 27;
    /**
     * <code>CRC = 28 [(.com.proto_i18n.Country.name) = "Costa Rican Colon"];</code>
     */
    public static final int CRC_VALUE = 28;
    /**
     * <code>CUP = 29 [(.com.proto_i18n.Country.name) = "Cuban Peso"];</code>
     */
    public static final int CUP_VALUE = 29;
    /**
     * <code>CVE = 30 [(.com.proto_i18n.Country.name) = "Escudo"];</code>
     */
    public static final int CVE_VALUE = 30;
    /**
     * <code>CYP = 31 [(.com.proto_i18n.Country.name) = "Cypriot Pound"];</code>
     */
    public static final int CYP_VALUE = 31;
    /**
     * <code>CZK = 32 [(.com.proto_i18n.Country.name) = "Koruna"];</code>
     */
    public static final int CZK_VALUE = 32;
    /**
     * <code>DJF = 33 [(.com.proto_i18n.Country.name) = "Djiboutian Franc"];</code>
     */
    public static final int DJF_VALUE = 33;
    /**
     * <code>DKK = 34 [(.com.proto_i18n.Country.name) = "Danish Krone"];</code>
     */
    public static final int DKK_VALUE = 34;
    /**
     * <code>DOP = 35 [(.com.proto_i18n.Country.name) = "Dominican Peso"];</code>
     */
    public static final int DOP_VALUE = 35;
    /**
     * <code>DZD = 36 [(.com.proto_i18n.Country.name) = "Algerian Dinar"];</code>
     */
    public static final int DZD_VALUE = 36;
    /**
     * <code>ECS = 37 [(.com.proto_i18n.Country.name) = "Sucre"];</code>
     */
    public static final int ECS_VALUE = 37;
    /**
     * <code>EEK = 38 [(.com.proto_i18n.Country.name) = "Estonian Kroon"];</code>
     */
    public static final int EEK_VALUE = 38;
    /**
     * <code>EGP = 39 [(.com.proto_i18n.Country.name) = "Egyptian Pound"];</code>
     */
    public static final int EGP_VALUE = 39;
    /**
     * <code>ETB = 40 [(.com.proto_i18n.Country.name) = "Ethiopian Birr"];</code>
     */
    public static final int ETB_VALUE = 40;
    /**
     * <code>EUR = 41 [(.com.proto_i18n.Country.name) = "Euros"];</code>
     */
    public static final int EUR_VALUE = 41;
    /**
     * <code>FJD = 42 [(.com.proto_i18n.Country.name) = "Fijian Dollar"];</code>
     */
    public static final int FJD_VALUE = 42;
    /**
     * <code>FKP = 43 [(.com.proto_i18n.Country.name) = "Falkland Pound"];</code>
     */
    public static final int FKP_VALUE = 43;
    /**
     * <code>GBP = 44 [(.com.proto_i18n.Country.name) = "Sterling"];</code>
     */
    public static final int GBP_VALUE = 44;
    /**
     * <code>GEL = 45 [(.com.proto_i18n.Country.name) = "Lari"];</code>
     */
    public static final int GEL_VALUE = 45;
    /**
     * <code>GIP = 46 [(.com.proto_i18n.Country.name) = "Gibraltar Pound"];</code>
     */
    public static final int GIP_VALUE = 46;
    /**
     * <code>GMD = 47 [(.com.proto_i18n.Country.name) = "Dalasi"];</code>
     */
    public static final int GMD_VALUE = 47;
    /**
     * <code>GNF = 48 [(.com.proto_i18n.Country.name) = "Guinean Franc"];</code>
     */
    public static final int GNF_VALUE = 48;
    /**
     * <code>GTQ = 49 [(.com.proto_i18n.Country.name) = "Quetzal"];</code>
     */
    public static final int GTQ_VALUE = 49;
    /**
     * <code>GYD = 50 [(.com.proto_i18n.Country.name) = "Guyanaese Dollar"];</code>
     */
    public static final int GYD_VALUE = 50;
    /**
     * <code>HKD = 51 [(.com.proto_i18n.Country.name) = "HKD"];</code>
     */
    public static final int HKD_VALUE = 51;
    /**
     * <code>HNL = 52 [(.com.proto_i18n.Country.name) = "Lempira"];</code>
     */
    public static final int HNL_VALUE = 52;
    /**
     * <code>HRK = 53 [(.com.proto_i18n.Country.name) = "Croatian Dinar"];</code>
     */
    public static final int HRK_VALUE = 53;
    /**
     * <code>HTG = 54 [(.com.proto_i18n.Country.name) = "Gourde"];</code>
     */
    public static final int HTG_VALUE = 54;
    /**
     * <code>HUF = 55 [(.com.proto_i18n.Country.name) = "Forint"];</code>
     */
    public static final int HUF_VALUE = 55;
    /**
     * <code>IDR = 56 [(.com.proto_i18n.Country.name) = "Indonesian Rupiah"];</code>
     */
    public static final int IDR_VALUE = 56;
    /**
     * <code>ILS = 57 [(.com.proto_i18n.Country.name) = "Shekel"];</code>
     */
    public static final int ILS_VALUE = 57;
    /**
     * <code>INR = 58 [(.com.proto_i18n.Country.name) = "Indian Rupee"];</code>
     */
    public static final int INR_VALUE = 58;
    /**
     * <code>IQD = 59 [(.com.proto_i18n.Country.name) = "Iraqi Dinar"];</code>
     */
    public static final int IQD_VALUE = 59;
    /**
     * <code>IRR = 60 [(.com.proto_i18n.Country.name) = "Iranian Rial"];</code>
     */
    public static final int IRR_VALUE = 60;
    /**
     * <code>ISK = 61 [(.com.proto_i18n.Country.name) = "Icelandic Krona"];</code>
     */
    public static final int ISK_VALUE = 61;
    /**
     * <code>JMD = 62 [(.com.proto_i18n.Country.name) = "Jamaican Dollar"];</code>
     */
    public static final int JMD_VALUE = 62;
    /**
     * <code>JOD = 63 [(.com.proto_i18n.Country.name) = "Jordanian Dinar"];</code>
     */
    public static final int JOD_VALUE = 63;
    /**
     * <code>JPY = 64 [(.com.proto_i18n.Country.name) = "Japanese Yen"];</code>
     */
    public static final int JPY_VALUE = 64;
    /**
     * <code>KES = 65 [(.com.proto_i18n.Country.name) = "Kenyan Shilling"];</code>
     */
    public static final int KES_VALUE = 65;
    /**
     * <code>KGS = 66 [(.com.proto_i18n.Country.name) = "Som"];</code>
     */
    public static final int KGS_VALUE = 66;
    /**
     * <code>KHR = 67 [(.com.proto_i18n.Country.name) = "Riel"];</code>
     */
    public static final int KHR_VALUE = 67;
    /**
     * <code>KMF = 68 [(.com.proto_i18n.Country.name) = "Comoran Franc"];</code>
     */
    public static final int KMF_VALUE = 68;
    /**
     * <code>KPW = 69 [(.com.proto_i18n.Country.name) = "Won"];</code>
     */
    public static final int KPW_VALUE = 69;
    /**
     * <code>KRW = 70 [(.com.proto_i18n.Country.name) = "Won"];</code>
     */
    public static final int KRW_VALUE = 70;
    /**
     * <code>KWD = 71 [(.com.proto_i18n.Country.name) = "Kuwaiti Dinar"];</code>
     */
    public static final int KWD_VALUE = 71;
    /**
     * <code>KYD = 72 [(.com.proto_i18n.Country.name) = "Caymanian Dollar"];</code>
     */
    public static final int KYD_VALUE = 72;
    /**
     * <code>KZT = 73 [(.com.proto_i18n.Country.name) = "Tenge"];</code>
     */
    public static final int KZT_VALUE = 73;
    /**
     * <code>LAK = 74 [(.com.proto_i18n.Country.name) = "Kip"];</code>
     */
    public static final int LAK_VALUE = 74;
    /**
     * <code>LBP = 75 [(.com.proto_i18n.Country.name) = "Lebanese Pound"];</code>
     */
    public static final int LBP_VALUE = 75;
    /**
     * <code>LKR = 76 [(.com.proto_i18n.Country.name) = "Rupee"];</code>
     */
    public static final int LKR_VALUE = 76;
    /**
     * <code>LRD = 77 [(.com.proto_i18n.Country.name) = "Liberian Dollar"];</code>
     */
    public static final int LRD_VALUE = 77;
    /**
     * <code>LSL = 78 [(.com.proto_i18n.Country.name) = "Loti"];</code>
     */
    public static final int LSL_VALUE = 78;
    /**
     * <code>LTL = 79 [(.com.proto_i18n.Country.name) = "Lita"];</code>
     */
    public static final int LTL_VALUE = 79;
    /**
     * <code>LVL = 80 [(.com.proto_i18n.Country.name) = "Lat"];</code>
     */
    public static final int LVL_VALUE = 80;
    /**
     * <code>LYD = 81 [(.com.proto_i18n.Country.name) = "Libyan Dinar"];</code>
     */
    public static final int LYD_VALUE = 81;
    /**
     * <code>MAD = 82 [(.com.proto_i18n.Country.name) = "Dirham"];</code>
     */
    public static final int MAD_VALUE = 82;
    /**
     * <code>MDL = 83 [(.com.proto_i18n.Country.name) = "Leu"];</code>
     */
    public static final int MDL_VALUE = 83;
    /**
     * <code>MGA = 84 [(.com.proto_i18n.Country.name) = "Malagasy Franc"];</code>
     */
    public static final int MGA_VALUE = 84;
    /**
     * <code>MKD = 85 [(.com.proto_i18n.Country.name) = "Denar"];</code>
     */
    public static final int MKD_VALUE = 85;
    /**
     * <code>MMK = 86 [(.com.proto_i18n.Country.name) = "Kyat"];</code>
     */
    public static final int MMK_VALUE = 86;
    /**
     * <code>MNT = 87 [(.com.proto_i18n.Country.name) = "Tugrik"];</code>
     */
    public static final int MNT_VALUE = 87;
    /**
     * <code>MOP = 88 [(.com.proto_i18n.Country.name) = "Pataca"];</code>
     */
    public static final int MOP_VALUE = 88;
    /**
     * <code>MRO = 89 [(.com.proto_i18n.Country.name) = "Ouguiya"];</code>
     */
    public static final int MRO_VALUE = 89;
    /**
     * <code>MTL = 90 [(.com.proto_i18n.Country.name) = "Maltese Lira"];</code>
     */
    public static final int MTL_VALUE = 90;
    /**
     * <code>MUR = 91 [(.com.proto_i18n.Country.name) = "Mauritian Rupee"];</code>
     */
    public static final int MUR_VALUE = 91;
    /**
     * <code>MVR = 92 [(.com.proto_i18n.Country.name) = "Rufiyaa"];</code>
     */
    public static final int MVR_VALUE = 92;
    /**
     * <code>MWK = 93 [(.com.proto_i18n.Country.name) = "Malawian Kwacha"];</code>
     */
    public static final int MWK_VALUE = 93;
    /**
     * <code>MXN = 94 [(.com.proto_i18n.Country.name) = "Peso"];</code>
     */
    public static final int MXN_VALUE = 94;
    /**
     * <code>MYR = 95 [(.com.proto_i18n.Country.name) = "Ringgit"];</code>
     */
    public static final int MYR_VALUE = 95;
    /**
     * <code>MZN = 96 [(.com.proto_i18n.Country.name) = "Metical"];</code>
     */
    public static final int MZN_VALUE = 96;
    /**
     * <code>NAD = 97 [(.com.proto_i18n.Country.name) = "Dollar"];</code>
     */
    public static final int NAD_VALUE = 97;
    /**
     * <code>NGN = 98 [(.com.proto_i18n.Country.name) = "Naira"];</code>
     */
    public static final int NGN_VALUE = 98;
    /**
     * <code>NIO = 99 [(.com.proto_i18n.Country.name) = "Cordoba Oro"];</code>
     */
    public static final int NIO_VALUE = 99;
    /**
     * <code>NOK = 100 [(.com.proto_i18n.Country.name) = "Norwegian Krone"];</code>
     */
    public static final int NOK_VALUE = 100;
    /**
     * <code>NPR = 101 [(.com.proto_i18n.Country.name) = "Nepalese Rupee"];</code>
     */
    public static final int NPR_VALUE = 101;
    /**
     * <code>NZD = 102 [(.com.proto_i18n.Country.name) = "New Zealand Dollars"];</code>
     */
    public static final int NZD_VALUE = 102;
    /**
     * <code>OMR = 103 [(.com.proto_i18n.Country.name) = "Sul Rial"];</code>
     */
    public static final int OMR_VALUE = 103;
    /**
     * <code>PAB = 104 [(.com.proto_i18n.Country.name) = "Balboa"];</code>
     */
    public static final int PAB_VALUE = 104;
    /**
     * <code>PEN = 105 [(.com.proto_i18n.Country.name) = "Nuevo Sol"];</code>
     */
    public static final int PEN_VALUE = 105;
    /**
     * <code>PGK = 106 [(.com.proto_i18n.Country.name) = "Kina"];</code>
     */
    public static final int PGK_VALUE = 106;
    /**
     * <code>PHP = 107 [(.com.proto_i18n.Country.name) = "Peso"];</code>
     */
    public static final int PHP_VALUE = 107;
    /**
     * <code>PKR = 108 [(.com.proto_i18n.Country.name) = "Rupee"];</code>
     */
    public static final int PKR_VALUE = 108;
    /**
     * <code>PLN = 109 [(.com.proto_i18n.Country.name) = "Zloty"];</code>
     */
    public static final int PLN_VALUE = 109;
    /**
     * <code>PYG = 110 [(.com.proto_i18n.Country.name) = "Guarani"];</code>
     */
    public static final int PYG_VALUE = 110;
    /**
     * <code>QAR = 111 [(.com.proto_i18n.Country.name) = "Rial"];</code>
     */
    public static final int QAR_VALUE = 111;
    /**
     * <code>RON = 112 [(.com.proto_i18n.Country.name) = "Leu"];</code>
     */
    public static final int RON_VALUE = 112;
    /**
     * <code>RUB = 113 [(.com.proto_i18n.Country.name) = "Ruble"];</code>
     */
    public static final int RUB_VALUE = 113;
    /**
     * <code>RWF = 114 [(.com.proto_i18n.Country.name) = "Rwanda Franc"];</code>
     */
    public static final int RWF_VALUE = 114;
    /**
     * <code>SAR = 115 [(.com.proto_i18n.Country.name) = "Riyal"];</code>
     */
    public static final int SAR_VALUE = 115;
    /**
     * <code>SBD = 116 [(.com.proto_i18n.Country.name) = "Solomon Islands Dollar"];</code>
     */
    public static final int SBD_VALUE = 116;
    /**
     * <code>SCR = 117 [(.com.proto_i18n.Country.name) = "Rupee"];</code>
     */
    public static final int SCR_VALUE = 117;
    /**
     * <code>SDG = 118 [(.com.proto_i18n.Country.name) = "Dinar"];</code>
     */
    public static final int SDG_VALUE = 118;
    /**
     * <code>SEK = 119 [(.com.proto_i18n.Country.name) = "Krona"];</code>
     */
    public static final int SEK_VALUE = 119;
    /**
     * <code>SGD = 120 [(.com.proto_i18n.Country.name) = "Dollar"];</code>
     */
    public static final int SGD_VALUE = 120;
    /**
     * <code>SKK = 121 [(.com.proto_i18n.Country.name) = "Koruna"];</code>
     */
    public static final int SKK_VALUE = 121;
    /**
     * <code>SLL = 122 [(.com.proto_i18n.Country.name) = "Leone"];</code>
     */
    public static final int SLL_VALUE = 122;
    /**
     * <code>SOS = 123 [(.com.proto_i18n.Country.name) = "Shilling"];</code>
     */
    public static final int SOS_VALUE = 123;
    /**
     * <code>SRD = 124 [(.com.proto_i18n.Country.name) = "Surinamese Guilder"];</code>
     */
    public static final int SRD_VALUE = 124;
    /**
     * <code>STD = 125 [(.com.proto_i18n.Country.name) = "Dobra"];</code>
     */
    public static final int STD_VALUE = 125;
    /**
     * <code>SVC = 126 [(.com.proto_i18n.Country.name) = "Salvadoran Colon"];</code>
     */
    public static final int SVC_VALUE = 126;
    /**
     * <code>SYP = 127 [(.com.proto_i18n.Country.name) = "Syrian Pound"];</code>
     */
    public static final int SYP_VALUE = 127;
    /**
     * <code>SZL = 128 [(.com.proto_i18n.Country.name) = "Lilangeni"];</code>
     */
    public static final int SZL_VALUE = 128;
    /**
     * <code>THB = 129 [(.com.proto_i18n.Country.name) = "Baht"];</code>
     */
    public static final int THB_VALUE = 129;
    /**
     * <code>TJS = 130 [(.com.proto_i18n.Country.name) = "Tajikistan Ruble"];</code>
     */
    public static final int TJS_VALUE = 130;
    /**
     * <code>TMT = 131 [(.com.proto_i18n.Country.name) = "Manat"];</code>
     */
    public static final int TMT_VALUE = 131;
    /**
     * <code>TND = 132 [(.com.proto_i18n.Country.name) = "Tunisian Dinar"];</code>
     */
    public static final int TND_VALUE = 132;
    /**
     * <code>TOP = 133 [(.com.proto_i18n.Country.name) = "Pa&#92;303&#92;225anga"];</code>
     */
    public static final int TOP_VALUE = 133;
    /**
     * <code>TRY = 134 [(.com.proto_i18n.Country.name) = "Lira"];</code>
     */
    public static final int TRY_VALUE = 134;
    /**
     * <code>TTD = 135 [(.com.proto_i18n.Country.name) = "Trinidad and Tobago Dollar"];</code>
     */
    public static final int TTD_VALUE = 135;
    /**
     * <code>TWD = 136 [(.com.proto_i18n.Country.name) = "Dollar"];</code>
     */
    public static final int TWD_VALUE = 136;
    /**
     * <code>TZS = 137 [(.com.proto_i18n.Country.name) = "Shilling"];</code>
     */
    public static final int TZS_VALUE = 137;
    /**
     * <code>UAH = 138 [(.com.proto_i18n.Country.name) = "Hryvnia"];</code>
     */
    public static final int UAH_VALUE = 138;
    /**
     * <code>UGX = 139 [(.com.proto_i18n.Country.name) = "Shilling"];</code>
     */
    public static final int UGX_VALUE = 139;
    /**
     * <code>USD = 140 [(.com.proto_i18n.Country.name) = "USD"];</code>
     */
    public static final int USD_VALUE = 140;
    /**
     * <code>UYU = 141 [(.com.proto_i18n.Country.name) = "Peso"];</code>
     */
    public static final int UYU_VALUE = 141;
    /**
     * <code>UZS = 142 [(.com.proto_i18n.Country.name) = "Som"];</code>
     */
    public static final int UZS_VALUE = 142;
    /**
     * <code>VEF = 143 [(.com.proto_i18n.Country.name) = "Bolivar"];</code>
     */
    public static final int VEF_VALUE = 143;
    /**
     * <code>VND = 144 [(.com.proto_i18n.Country.name) = "Dong"];</code>
     */
    public static final int VND_VALUE = 144;
    /**
     * <code>VUV = 145 [(.com.proto_i18n.Country.name) = "Vatu"];</code>
     */
    public static final int VUV_VALUE = 145;
    /**
     * <code>XAF = 146 [(.com.proto_i18n.Country.name) = "CFA Franc BEAC"];</code>
     */
    public static final int XAF_VALUE = 146;
    /**
     * <code>XCD = 147 [(.com.proto_i18n.Country.name) = "East Caribbean Dollar"];</code>
     */
    public static final int XCD_VALUE = 147;
    /**
     * <code>XOF = 148 [(.com.proto_i18n.Country.name) = "CFA Franc BCEAO"];</code>
     */
    public static final int XOF_VALUE = 148;
    /**
     * <code>XPF = 149 [(.com.proto_i18n.Country.name) = "CFP Franc"];</code>
     */
    public static final int XPF_VALUE = 149;
    /**
     * <code>YER = 150 [(.com.proto_i18n.Country.name) = "Rial"];</code>
     */
    public static final int YER_VALUE = 150;
    /**
     * <code>ZAR = 151 [(.com.proto_i18n.Country.name) = "Rand"];</code>
     */
    public static final int ZAR_VALUE = 151;
    /**
     * <code>ZMK = 152 [(.com.proto_i18n.Country.name) = "Kwacha"];</code>
     */
    public static final int ZMK_VALUE = 152;
    /**
     * <code>ZWD = 153 [(.com.proto_i18n.Country.name) = "Zimbabwe Dollar"];</code>
     */
    public static final int ZWD_VALUE = 153;
    /**
     * <code>SSP = 154 [(.com.proto_i18n.Country.name) = "South Sudanese Pound"];</code>
     */
    public static final int SSP_VALUE = 154;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static CurrencyCode valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static CurrencyCode forNumber(int value) {
      switch (value) {
        case 1: return AED;
        case 2: return AFN;
        case 3: return ALL;
        case 4: return AMD;
        case 5: return ANG;
        case 6: return ARS;
        case 7: return AUD;
        case 8: return AZN;
        case 9: return BBD;
        case 10: return BDT;
        case 11: return BGN;
        case 12: return BHD;
        case 13: return BIF;
        case 14: return BMD;
        case 15: return BND;
        case 16: return BOB;
        case 17: return BRL;
        case 18: return BSD;
        case 19: return BWP;
        case 20: return BYR;
        case 21: return BZD;
        case 22: return CAD;
        case 23: return CDF;
        case 24: return CHF;
        case 25: return CLP;
        case 26: return CNY;
        case 27: return COP;
        case 28: return CRC;
        case 29: return CUP;
        case 30: return CVE;
        case 31: return CYP;
        case 32: return CZK;
        case 33: return DJF;
        case 34: return DKK;
        case 35: return DOP;
        case 36: return DZD;
        case 37: return ECS;
        case 38: return EEK;
        case 39: return EGP;
        case 40: return ETB;
        case 41: return EUR;
        case 42: return FJD;
        case 43: return FKP;
        case 44: return GBP;
        case 45: return GEL;
        case 46: return GIP;
        case 47: return GMD;
        case 48: return GNF;
        case 49: return GTQ;
        case 50: return GYD;
        case 51: return HKD;
        case 52: return HNL;
        case 53: return HRK;
        case 54: return HTG;
        case 55: return HUF;
        case 56: return IDR;
        case 57: return ILS;
        case 58: return INR;
        case 59: return IQD;
        case 60: return IRR;
        case 61: return ISK;
        case 62: return JMD;
        case 63: return JOD;
        case 64: return JPY;
        case 65: return KES;
        case 66: return KGS;
        case 67: return KHR;
        case 68: return KMF;
        case 69: return KPW;
        case 70: return KRW;
        case 71: return KWD;
        case 72: return KYD;
        case 73: return KZT;
        case 74: return LAK;
        case 75: return LBP;
        case 76: return LKR;
        case 77: return LRD;
        case 78: return LSL;
        case 79: return LTL;
        case 80: return LVL;
        case 81: return LYD;
        case 82: return MAD;
        case 83: return MDL;
        case 84: return MGA;
        case 85: return MKD;
        case 86: return MMK;
        case 87: return MNT;
        case 88: return MOP;
        case 89: return MRO;
        case 90: return MTL;
        case 91: return MUR;
        case 92: return MVR;
        case 93: return MWK;
        case 94: return MXN;
        case 95: return MYR;
        case 96: return MZN;
        case 97: return NAD;
        case 98: return NGN;
        case 99: return NIO;
        case 100: return NOK;
        case 101: return NPR;
        case 102: return NZD;
        case 103: return OMR;
        case 104: return PAB;
        case 105: return PEN;
        case 106: return PGK;
        case 107: return PHP;
        case 108: return PKR;
        case 109: return PLN;
        case 110: return PYG;
        case 111: return QAR;
        case 112: return RON;
        case 113: return RUB;
        case 114: return RWF;
        case 115: return SAR;
        case 116: return SBD;
        case 117: return SCR;
        case 118: return SDG;
        case 119: return SEK;
        case 120: return SGD;
        case 121: return SKK;
        case 122: return SLL;
        case 123: return SOS;
        case 124: return SRD;
        case 125: return STD;
        case 126: return SVC;
        case 127: return SYP;
        case 128: return SZL;
        case 129: return THB;
        case 130: return TJS;
        case 131: return TMT;
        case 132: return TND;
        case 133: return TOP;
        case 134: return TRY;
        case 135: return TTD;
        case 136: return TWD;
        case 137: return TZS;
        case 138: return UAH;
        case 139: return UGX;
        case 140: return USD;
        case 141: return UYU;
        case 142: return UZS;
        case 143: return VEF;
        case 144: return VND;
        case 145: return VUV;
        case 146: return XAF;
        case 147: return XCD;
        case 148: return XOF;
        case 149: return XPF;
        case 150: return YER;
        case 151: return ZAR;
        case 152: return ZMK;
        case 153: return ZWD;
        case 154: return SSP;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CurrencyCode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        CurrencyCode> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CurrencyCode>() {
            public CurrencyCode findValueByNumber(int number) {
              return CurrencyCode.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.proto_i18n.generated.Currency.getDescriptor().getEnumTypes().get(0);
    }

    private static final CurrencyCode[] VALUES = values();

    public static CurrencyCode valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private CurrencyCode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.proto_i18n.Currency.CurrencyCode)
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.proto_i18n.generated.Currency)) {
      return super.equals(obj);
    }
    com.proto_i18n.generated.Currency other = (com.proto_i18n.generated.Currency) obj;

    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.proto_i18n.generated.Currency parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.proto_i18n.generated.Currency parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.proto_i18n.generated.Currency parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.proto_i18n.generated.Currency parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.proto_i18n.generated.Currency parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.proto_i18n.generated.Currency parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.proto_i18n.generated.Currency parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.proto_i18n.generated.Currency parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.proto_i18n.generated.Currency parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.proto_i18n.generated.Currency parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.proto_i18n.generated.Currency parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.proto_i18n.generated.Currency parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.proto_i18n.generated.Currency prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code com.proto_i18n.Currency}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:com.proto_i18n.Currency)
      com.proto_i18n.generated.CurrencyOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.proto_i18n.generated.CurrencyOuterClass.internal_static_com_proto_i18n_Currency_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.proto_i18n.generated.CurrencyOuterClass.internal_static_com_proto_i18n_Currency_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.proto_i18n.generated.Currency.class, com.proto_i18n.generated.Currency.Builder.class);
    }

    // Construct using com.proto_i18n.generated.Currency.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.proto_i18n.generated.CurrencyOuterClass.internal_static_com_proto_i18n_Currency_descriptor;
    }

    @java.lang.Override
    public com.proto_i18n.generated.Currency getDefaultInstanceForType() {
      return com.proto_i18n.generated.Currency.getDefaultInstance();
    }

    @java.lang.Override
    public com.proto_i18n.generated.Currency build() {
      com.proto_i18n.generated.Currency result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.proto_i18n.generated.Currency buildPartial() {
      com.proto_i18n.generated.Currency result = new com.proto_i18n.generated.Currency(this);
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.proto_i18n.generated.Currency) {
        return mergeFrom((com.proto_i18n.generated.Currency)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.proto_i18n.generated.Currency other) {
      if (other == com.proto_i18n.generated.Currency.getDefaultInstance()) return this;
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.proto_i18n.generated.Currency parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.proto_i18n.generated.Currency) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:com.proto_i18n.Currency)
  }

  // @@protoc_insertion_point(class_scope:com.proto_i18n.Currency)
  private static final com.proto_i18n.generated.Currency DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.proto_i18n.generated.Currency();
  }

  public static com.proto_i18n.generated.Currency getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  @java.lang.Deprecated public static final com.google.protobuf.Parser<Currency>
      PARSER = new com.google.protobuf.AbstractParser<Currency>() {
    @java.lang.Override
    public Currency parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Currency(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Currency> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Currency> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.proto_i18n.generated.Currency getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

  public static final int NAME_FIELD_NUMBER = 100000;
  /**
   * <code>extend .google.protobuf.EnumValueOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.EnumValueOptions,
      java.lang.String> name = com.google.protobuf.GeneratedMessage
          .newMessageScopedGeneratedExtension(
        com.proto_i18n.generated.Currency.getDefaultInstance(),
        0,
        java.lang.String.class,
        null);
}

